#!/bin/bash

# Prune Continuous Releases, leaving that for the current short hash intact

REPO=""

usage()
{
	echo "Usage: $0 [-r <owner/repo>]"
	exit 1
}

# Parse options
while getopts ":r:" opt
do
	case "${opt}" in
		r)
			REPO=${OPTARG}
			echo "Repo set to '${REPO}'"
			;;
		\?)
			usage
			;;
		*)
			usage
			;;
	esac
done

if [ "x$REPO" = "x" ]
then
	echo "Error: The owner and repo must be supplied."
	exit 1
fi

# Set up our variables
echo "Repository is $REPO"
REPOURL="https://api.github.com/repos/${REPO}"
echo "API URL is $REPOURL"
CURRENTHASH=`git rev-parse --short HEAD`
echo "Current short hash is $CURRENTHASH"

# Enable erroring
set -e

# Disable command expansion so we don't leak secrets
set +x

# Get info on current releases
RELEASES=$(curl -XGET --header "Authorization: token ${GITHUB_TOKEN}" ${REPOURL}/releases)
if [[ $RELEASES =~ "documentation_url" ]]
then
	MESSAGE=$(echo $RELEASES | jq ". | .message")
	echo "Error returned: "$MESSAGE
	exit 1
fi

# Get the url of the current release
echo "Searching for current release... ($CURRENTHASH)"
FILTER=".[] | select(.tag_name | match(\"$CURRENTHASH\"))"
CURRENT_RELEASEINFO=$(echo $RELEASES | jq "$FILTER")
CURRENT_URL=$(echo $CURRENT_RELEASEINFO | jq -r '. | .url')
if [ "x$CURRENT_URL" = "x" ]
then
	echo " -- No continuous release with tag $CURRENTHASH currently exists."
	echo "    There is probably something wrong...."
else
	echo " -- Found current release with tag $CURRENTHASH"
	echo "    url: $CURRENT_URL"
fi

# Prune old continuous releasesch
echo "Pruning old continuous releases..."

# Filter release information with jq to get the continuous build urls and tags to delete
URLS=$(echo $RELEASES | jq -r '.[] | select(.tag_name | match("continuous/.*")) | .url')
TAGS=$(echo $RELEASES | jq -r '.[] | select(.tag_name | match("continuous/.*")) | .tag_name')

# Delete old continuous releases (but not the current one if it exists)
echo "  - Found continuous release url(s): "$URLS
for url in $URLS
do
	if [ "$url" = "$CURRENT_URL" ]
	then
		echo " -- Existing continuous release at $url will not be deleted as it is the current release."
		continue
	fi
	echo "  ! Deleting continuous release at $url..."
	curl -XDELETE --header "Authorization: token ${GITHUB_TOKEN}" $url
done

# Delete tags (but not the current one if it exists)
echo "  - Found tags: "$TAGS
for tag in $TAGS
do
	if [ "$tag" = "continuous/$CURRENTHASH" ]
	then
		echo " -- Existing continuous reference tag $tag will not be deleted as it is associated to the current release."
		continue
	fi
	echo "  ! Deleting reference $tag..."
	curl -XDELETE --header "Authorization: token ${GITHUB_TOKEN}" ${REPOURL}/git/refs/tags/${tag}
done

# All done.
